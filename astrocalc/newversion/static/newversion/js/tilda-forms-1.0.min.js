function t_forms__onReady(func) {
    "loading" !== document.readyState ? func() : document.addEventListener("DOMContentLoaded", func)
}
window.t_forms__lang = (window.navigator.userLanguage || window.navigator.language).toUpperCase().slice(0, 2),
window.scriptSysPayment = {},
window.handlerSysPayment = {},
window.isInitEventsZB = {},
window.isInitEventsCustomMask = {},
window.initForms = {},
window.tildaForm = {
    versionLib: "02.001",
    endpoint: "forms.tildacdn.com",
   // isRecaptchaScriptInit: !1,
    currentFormProccessing: !1
},
t_forms__onReady((function() {
    var allrecords = document.getElementById("allrecords");
    if (allrecords) {
        var projectLang = allrecords.getAttribute("data-tilda-project-lang");
        projectLang && (window.t_forms__lang = projectLang)
    }
    t_forms__initForms();
    var isST100 = !!document.querySelector(".t706"),
        isST105 = !!document.querySelector(".js-payment-systembox"),
        isExistsPay = !!document.querySelector("input[name=tld_product]");
    if (isST100 || isST105 || isExistsPay) {
        var fileName = "tilda-forms-payments-1.0",
            script;
        if (!document.head.querySelector('script[src*="' + fileName + '"]'))
            (script = document.createElement("script")).type = "text/javascript",
            script.src = "https://static.tildacdn.com/js/" + fileName + ".min.js",
            script.onerror = function() {
                console.error("Failed to load tilda-forms-payments: ", this.src)
            },
            document.head.appendChild(script)
    }
    var lang = window.t_forms__lang;
    if ("RU" !== lang && "EN" !== lang) {
        var fileName = "tilda-forms-dict-1.0",
            script;
        if (!document.head.querySelector('script[src*="' + fileName + '"]'))
            (script = document.createElement("script")).type = "text/javascript",
            script.src = "https://static.tildacdn.com/js/" + fileName + ".min.js",
            script.onerror = function() {
                console.error("Failed to load tilda-forms-dictionary: ", this.src)
            },
            document.head.appendChild(script)
    }
})),

window.tildaForm_customMasksLoad = function() {
    if (!0 !== window.isInitEventsCustomMask) {
        var script = document.createElement("script");
        script.type = "text/javascript",
        script.src = "https://static.tildacdn.com/js/tilda-forms-custommask-1.0.min.js",
        document.head.appendChild(script),
        window.isInitEventsCustomMask = !0
    }
},
window.tildaForm_initMasks = function() {
    var inputsCustomMask = document.querySelectorAll(".js-tilda-mask");
    if (inputsCustomMask.length && !0 !== window.isInitEventsCustomMask)
        return window.tildaForm_customMasksLoad(), void window.setTimeout((function() {
            window.tildaForm_initMasks()
        }), 100);
    !0 === window.isInitEventsCustomMask && Array.prototype.forEach.call(inputsCustomMask, (function(input) {
        t_asyncLoad(input)
    }))
},
t_forms__onReady((function() {
    window.tildaForm_initMasks()
})),
window.tildaForm.validate = function(form) {
    form instanceof Element || (form = form[0]);
    for (var inputs = form.querySelectorAll(".js-tilda-rule"), arrError = [], isEmptyValue = !0, i = 0; i < inputs.length; i++) {
        var input = inputs[i],
            isReq = !!parseInt(input.getAttribute("data-tilda-req") || 0, 10),
            dataRule = input.getAttribute("data-tilda-rule") || "none",
            regExp = "",
            strValue = "",
            minLength = input.getAttribute("data-tilda-rule-minlength") || 0,
            maxLength = input.getAttribute("data-tilda-rule-maxlength") || 0,
            objError = {},
            value = input.value,
            valueNoSpace = "",
            inputType = input.getAttribute("type"),
            inputName = input.getAttribute("name"),
            dataFormCart = form.getAttribute("data-formcart");
        objError.obj = input,
        objError.type = [],
        value && value.length && (valueNoSpace = value.replace(/[\s\u0000—\u001F\u2000-\u200F\uFEFF\u2028-\u202F\u205F-\u206F]/gi, ""), value = value.trim()),
        value.length > 0 && (isEmptyValue = !1),
        minLength && (minLength = parseInt(minLength, 10)),
        maxLength && (maxLength = parseInt(maxLength, 10));
        var isEmpty = !value.length && !valueNoSpace.length,
            isCheckBoxOrRadio = "checkbox" === inputType || "radio" === inputType,
            isChecked = !form.querySelectorAll('[name="' + inputName + '"]:checked').length;
        if (isReq && (isEmpty || isCheckBoxOrRadio && isChecked))
            objError.type.push("req");
        else {
            switch (dataRule) {
            case "email":
                regExp = /^(?!\.)(?!.*\.\.)[a-zA-Zёа-яЁА-Я0-9\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD_\.\-\+]{0,63}[a-zA-Zёа-яЁА-Я0-9\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD_\-\+]@[a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéû0-9][a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéû0-9\.\-]{0,253}\.[a-zA-Zёа-яЁА-Я]{2,10}$/gi,
                value.length && !value.match(regExp) && objError.type.push("email");
                break;
            case "url":
                regExp = /^((https?|ftp):\/\/)?[a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéûşç0-9][a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéûşç0-9_\.\-]{0,253}\.[a-zA-Zёа-яЁА-Я]{2,10}\/?$/gi,
                value.length && ((strValue = (strValue = (strValue = value.split("//")) && strValue.length > 1 ? strValue[1] : strValue[0]).split("/")) && strValue.length && strValue[0] ? (strValue = strValue[0]).match(regExp) || objError.type.push("url") : (strValue && !strValue[0] || objError.type.push("url"), strValue = ""));
                break;
            case "phone":
                var phoneMask = input.getAttribute("data-tilda-mask"),
                    strRegExp = "^[0-9()+-";
                phoneMask && (-1 !== phoneMask.indexOf("*") ? strRegExp += "a-zёа-я" : (-1 !== phoneMask.indexOf("a") && (strRegExp += "a-z"), -1 !== phoneMask.indexOf("а") && (strRegExp += "а-яё"))),
                strRegExp += "]+$",
                regExp = new RegExp(strRegExp, "gi"),
                valueNoSpace.length && !valueNoSpace.match(regExp) ? objError.type.push("phone") : (1 == (strValue = valueNoSpace.replace(/[^0-9]+/g, "")).indexOf("000") || 1 == strValue.indexOf("111") && "9" != strValue.substring(0, 1) || 1 == strValue.indexOf("222") && "5" != strValue.substring(0, 1) || 1 == strValue.indexOf("333") || 1 == strValue.indexOf("444") || 1 == strValue.indexOf("555") && "0" != strValue.substring(0, 1) || 1 == strValue.indexOf("666") && "0" != strValue.substring(0, 1) || 1 == strValue.indexOf("8888") && "4" != strValue.substring(0, 1)) && objError.type.push("phone");
                break;
            case "number":
                regExp = /^[0-9]+$/gi,
                valueNoSpace.length > 0 && !valueNoSpace.match(regExp) && objError.type.push("number");
                break;
            case "date":
                var format = {
                    "DD-MM-YYYY": /^(0[1-9]|1[0-9]|2[0-9]|3[01])[\-\.\/](0[1-9]|1[012])[\-\.\/][0-9]{4}$/,
                    "MM-DD-YYYY": /^(0[1-9]|1[012])[\-\.\/](0[1-9]|1[0-9]|2[0-9]|3[01])[\-\.\/][0-9]{4}$/,
                    "YYYY-MM-DD": /^[0-9]{4}[\-\.\/](0[1-9]|1[012])[\-\.\/](0[1-9]|1[0-9]|2[0-9]|3[01])$/
                };
                valueNoSpace.length > 0 && !valueNoSpace.match(format[input.getAttribute("data-tilda-dateformat")] || /^[0-9]{1,4}[\-\.\/][0-9]{1,2}[\-\.\/][0-9]{1,4}$/gi) && objError.type.push("date");
                break;
            case "time":
                regExp = /^[0-9]{2}[:\.][0-9]{2}$/gi,
                valueNoSpace.length > 0 && !valueNoSpace.match(regExp) && objError.type.push("time");
                break;
            case "name":
                regExp = /^([ЁёäöüÄÖÜßèéûҐґЄєІіЇїӐӑЙйК̆к̆Ӄ̆ӄ̆Ԛ̆ԛ̆Г̆г̆Ҕ̆ҕ̆ӖӗѢ̆ѣ̆ӁӂꚄ̆ꚅ̆ҊҋО̆о̆Ө̆ө̆Ꚍ̆ꚍ̆ЎўХ̆х̆Џ̆џ̆Ꚏ̆ꚏ̆Ꚇ̆ꚇ̆Ҽ̆ҽ̆Ш̆ш̆Ꚗ̆ꚗ̆Щ̆щ̆Ы̆ы̆Э̆э̆Ю̆ю̆Я̆я̆А́а́ЃѓД́д́Е́е́Ё́ёӘ́ә́З́з́И́и́І́і́Ї́ї́ЌќЛ́л́Н́н́О́о́Р́р́С́с́Т́т́У́у́Ӱ́ӱ́Ү́ү́Х́х́Ц́ц́Ы́ы́Э́э́Ӭ́ӭ́Ю́ю́Ю̈́ю̈́Я́я́Ѣ́ѣ́ҒғӺӻҒ̌ғ̌Ј̵ј̵ҞҟҜҝԞԟӨөҎҏҰұӾӿҸҹҌҍҢңҚқҒғӘәҺһІіҰұҮүӨөȺⱥꜺꜻƂƃɃƀȻȼꞒꞓƋƌĐđɆɇǤǥꞠꞡĦħƗɨƗ́ɨ́Ɨ̀ɨ̀Ɨ̂ɨ̂Ɨ̌ɨ̌Ɨ̃ɨ̃Ɨ̄ɨ̄Ɨ̈ɨ̈Ɨ̋ɨ̋Ɨ̏ɨ̏Ɨ̧ɨ̧Ɨ̧̀ɨ̧̀Ɨ̧̂ɨ̧̂Ɨ̧̌ɨ̧̌ᵼɈɉɟɟ̟ʄʄ̊ʄ̥K̵k̵ꝀꝁꝂꝃꝄꝅꞢꞣŁłł̓Ł̣ł̣ᴌȽƚⱠⱡꝈꝉƛƛ̓ꞤꞥꝊꝋØøǾǿØ̀ø̀Ø̂øØ̌ø̌Ø̄ø̄Ø̃ø̃Ø̨ø̨Ø᷎ø᷎ᴓⱣᵽꝐꝑꝖꝗꝘꝙɌɍꞦꞧꞨꞩẜẝŦŧȾⱦᵺꝤꝥꝦꝧɄʉɄ́ʉ́Ʉ̀ʉ̀Ʉ̂ʉ̂Ʉ̌ʉ̌Ʉ̄ʉ̄Ʉ̃ʉ̃Ʉ̃́ʉ̃́Ʉ̈ʉ̈ʉ̞ᵾU̸u̸ᵿꝞꝟw̸ɎɏƵƶA-Za-z\u00C0\u00C0-\u00C3\u00C8-\u00CA\u00CC\u00CD\u00D2-\u00D9\u00DA\u00DD\u00E0-\u00E3\u00E8\u00E9\u00EA\u00EC\u00ED\u00F2-\u00F5\u00F9\u00FA\u00FD\u0102\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01A0\u01A1\u01AF\u01B0\u1EA0\u1EA1-\u1EF9\u0027\u2019\u0300-\u03FF\u0400-\u04FF\u0500-\u05FF\u0600-\u06FF\u3040-\u30FF\u0041-\u007A\u00C0-\u02B8\uFB1D-\uFB1F\uFB2A-\uFB4E\u0E00-\u0E7F\u10A0-\u10FF\u3040-\u309F\u30A0-\u30FF\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD]{1,})([ЁёäöüÄÖÜßèéûҐґЄєІіЇїӐӑЙйК̆к̆Ӄ̆ӄ̆Ԛ̆ԛ̆Г̆г̆Ҕ̆ҕ̆ӖӗѢ̆ѣ̆ӁӂꚄ̆ꚅ̆ҊҋО̆о̆Ө̆ө̆Ꚍ̆ꚍ̆ЎўХ̆х̆Џ̆џ̆Ꚏ̆ꚏ̆Ꚇ̆ꚇ̆Ҽ̆ҽ̆Ш̆ш̆Ꚗ̆ꚗ̆Щ̆щ̆Ы̆ы̆Э̆э̆Ю̆ю̆Я̆я̆А́а́ЃѓД́д́Е́е́Ё́ёӘ́ә́З́з́И́и́І́і́Ї́ї́ЌќЛ́л́Н́н́О́о́Р́р́С́с́Т́т́У́у́Ӱ́ӱ́Ү́ү́Х́х́Ц́ц́Ы́ы́Э́э́Ӭ́ӭ́Ю́ю́Ю̈́ю̈́Я́я́Ѣ́ѣ́ҒғӺӻҒ̌ғ̌Ј̵ј̵ҞҟҜҝԞԟӨөҎҏҰұӾӿҸҹҌҍҢңҚқҒғӘәҺһІіҰұҮүӨөȺⱥꜺꜻƂƃɃƀȻȼꞒꞓƋƌĐđɆɇǤǥꞠꞡĦħƗɨƗ́ɨ́Ɨ̀ɨ̀Ɨ̂ɨ̂Ɨ̌ɨ̌Ɨ̃ɨ̃Ɨ̄ɨ̄Ɨ̈ɨ̈Ɨ̋ɨ̋Ɨ̏ɨ̏Ɨ̧ɨ̧Ɨ̧̀ɨ̧̀Ɨ̧̂ɨ̧̂Ɨ̧̌ɨ̧̌ᵼɈɉɟɟ̟ʄʄ̊ʄ̥K̵k̵ꝀꝁꝂꝃꝄꝅꞢꞣŁłł̓Ł̣ł̣ᴌȽƚⱠⱡꝈꝉƛƛ̓ꞤꞥꝊꝋØøǾǿØ̀ø̀Ø̂øØ̌ø̌Ø̄ø̄Ø̃ø̃Ø̨ø̨Ø᷎ø᷎ᴓⱣᵽꝐꝑꝖꝗꝘꝙɌɍꞦꞧꞨꞩẜẝŦŧȾⱦᵺꝤꝥꝦꝧɄʉɄ́ʉ́Ʉ̀ʉ̀Ʉ̂ʉ̂Ʉ̌ʉ̌Ʉ̄ʉ̄Ʉ̃ʉ̃Ʉ̃́ʉ̃́Ʉ̈ʉ̈ʉ̞ᵾU̸u̸ᵿꝞꝟw̸ɎɏƵƶA-Za-z\u00C0\u00C0-\u00C3\u00C8-\u00CA\u00CC\u00CD\u00D2-\u00D9\u00DA\u00DD\u00E0-\u00E3\u00E8\u00E9\u00EA\u00EC\u00ED\u00F2-\u00F5\u00F9\u00FA\u00FD\u0102\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01A0\u01A1\u01AF\u01B0\u1EA0\u1EA1-\u1EF9\u0041-\u007A\u00C0-\u02B8\u0300-\u03FF\u0400-\u04FF\u0500-\u05FF\u0600-\u06FF\u3040-\u30FF\uFB1D-\uFB1F\uFB2A-\uFB4E\u0E00-\u0E7F\u10A0-\u10FF\u3040-\u309F\u30A0-\u30FF\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD\-\'\‘\s\.]{0,})$/gi,
                value.length && !value.match(regExp) && objError.type.push("name");
                break;
            case "nameeng":
                regExp = /^([A-Za-z\s]{1,}((\-)?[A-Za-z\.\s](\')?){0,})*$/i,
                value.length && !value.match(regExp) && objError.type.push("nameeng");
                break;
            case "namerus":
                regExp = /^([А-Яа-яЁё\s]{1,}((\-)?[А-Яа-яЁё\.\s](\')?){0,})*$/i,
                value.length && !value.match(regExp) && objError.type.push("namerus");
                break;
            case "string":
                regExp = /^[A-Za-zА-Яа-я0-9ЁёЁёäöüÄÖÜßèéûӐӑЙйК̆к̆Ӄ̆ӄ̆Ԛ̆ԛ̆Г̆г̆Ҕ̆ҕ̆ӖӗѢ̆ѣ̆ӁӂꚄ̆ꚅ̆ҊҋО̆о̆Ө̆ө̆Ꚍ̆ꚍ̆ЎўХ̆х̆Џ̆џ̆Ꚏ̆ꚏ̆Ꚇ̆ꚇ̆Ҽ̆ҽ̆Ш̆ш̆Ꚗ̆ꚗ̆Щ̆щ̆Ы̆ы̆Э̆э̆Ю̆ю̆Я̆я̆А́а́ЃѓД́д́Е́е́Ё́ёӘ́ә́З́з́И́и́І́і́Ї́ї́ЌќЛ́л́Н́н́О́о́Р́р́С́с́Т́т́У́у́Ӱ́ӱ́Ү́ү́Х́х́Ц́ц́Ы́ы́Э́э́Ӭ́ӭ́Ю́ю́Ю̈́ю̈́Я́я́Ѣ́ѣ́ҒғӺӻҒ̌ғ̌Ј̵ј̵ҞҟҜҝԞԟӨөҎҏҰұӾӿҸҹҌҍҢңҚқҒғӘәҺһІіҰұҮүӨөȺⱥꜺꜻƂƃɃƀȻȼꞒꞓƋƌĐđɆɇǤǥꞠꞡĦħƗɨƗ́ɨ́Ɨ̀ɨ̀Ɨ̂ɨ̂Ɨ̌ɨ̌Ɨ̃ɨ̃Ɨ̄ɨ̄Ɨ̈ɨ̈Ɨ̋ɨ̋Ɨ̏ɨ̏Ɨ̧ɨ̧Ɨ̧̀ɨ̧̀Ɨ̧̂ɨ̧̂Ɨ̧̌ɨ̧̌ᵼɈɉɟɟ̟ʄʄ̊ʄ̥K̵k̵ꝀꝁꝂꝃꝄꝅꞢꞣŁłł̓Ł̣ł̣ᴌȽƚⱠⱡꝈꝉƛƛ̓ꞤꞥꝊꝋØøǾǿØ̀ø̀Ø̂øØ̌ø̌Ø̄ø̄Ø̃ø̃Ø̨ø̨Ø᷎ø᷎ᴓⱣᵽꝐꝑꝖꝗꝘꝙɌɍꞦꞧꞨꞩẜẝŦŧȾⱦᵺꝤꝥꝦꝧɄʉɄ́ʉ́Ʉ̀ʉ̀Ʉ̂ʉ̂Ʉ̌ʉ̌Ʉ̄ʉ̄Ʉ̃ʉ̃Ʉ̃́ʉ̃́Ʉ̈ʉ̈ʉ̞ᵾU̸u̸ᵿꝞꝟw̸ɎɏƵƶ\u0041-\u007A\u00C0-\u02B8\u0300-\u03FF\u0400-\u04FF\u0500-\u05FF\u0600-\u06FF\u3040-\u30FF\uFB1D-\uFB1F\uFB2A-\uFB4E\u0E00-\u0E7F\u10A0-\u10FF\u3040-\u309F\u30A0-\u30FF\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD,\.:;\"\'\`\-\_\+\?\!\%\$\@\*\&\^\s]$/i,
                value.length && !value.match(regExp) && objError.type.push("string");
                break;
            case "chosevalue":
                var isOptionSelected;
                "true" === input.getAttribute("data-option-selected") || objError.type.push("chosevalue");
                break;
            case "promocode":
                "y" !== dataFormCart || !valueNoSpace.length || !window.tcart || window.tcart.promocode && window.tcart.prodamount_discountsum || objError.type.push("promocode");
                break;
            case "deliveryreq":
                objError.type.push("deliveryreq")
            }
            minLength > 0 && value.length && value.length < minLength && objError.type.push("minlength"),
            maxLength > 0 && value.length && value.length > maxLength && objError.type.push("maxlength")
        }
        objError.type && objError.type.length && (arrError[arrError.length] = objError)
    }
    if ("y" === dataFormCart) {
        var isMinOrderSetted = void 0 !== window.tcart_minorder && window.tcart_minorder > 0,
            isMinQuantitySetted = void 0 !== window.tcart_mincntorder && window.tcart_mincntorder > 0,
            objError,
            objError;
        if (isMinOrderSetted)
            if (window.tcart.prodamount < window.tcart_minorder)
                (objError = {
                    obj: {},
                    type: []
                }).type.push("minorder"),
                arrError.push(objError);
        if (isMinQuantitySetted && window.tcart.total < window.tcart_mincntorder)
            (objError = {
                obj: {},
                type: []
            }).type.push("minquantity"),
            arrError.push(objError)
    }
    return isEmptyValue && !arrError.length && (arrError = [{
        obj: "none",
        type: ["emptyfill"]
    }]), arrError
},
window.tildaForm.hideErrors = function(form) {
    if ("object" != typeof form || form.length) {
        form instanceof Element || (form = form[0]);
        var errorBoxes = form.querySelectorAll(".js-errorbox-all"),
            errorRule = form.querySelectorAll(".js-rule-error"),
            errorRuleAll = form.querySelectorAll(".js-error-rule-all"),
            successBox = form.querySelectorAll(".js-successbox"),
            errorControlBox = form.querySelectorAll(".js-error-control-box"),
            errorControlInput = form.querySelectorAll(".js-error-control-box .t-input-error"),
            errorPopup = document.getElementById("tilda-popup-for-error");
        Array.prototype.forEach.call(errorBoxes, (function(error) {
            error.style.display = "none"
        })),
        Array.prototype.forEach.call(errorRule, (function(error) {
            error.style.display = "none"
        })),
        Array.prototype.forEach.call(errorRuleAll, (function(error) {
            error.innerHTML = ""
        })),
        Array.prototype.forEach.call(successBox, (function(success) {
            success.style.display = "none"
        })),
        Array.prototype.forEach.call(errorControlInput, (function(error) {
            error.innerHTML = ""
        })),
        Array.prototype.forEach.call(errorControlBox, (function(error) {
            t_removeClass(error, "js-error-control-box")
        })),
        t_removeClass(form, "js-send-form-error"),
        t_removeClass(form, "js-send-form-success"),
        errorPopup && t_fadeOut(errorPopup)
    }
},
window.tildaForm.showErrorInPopup = function(form, arrErrors) {
    if (form instanceof Element || (form = form[0]), !arrErrors || !arrErrors.length)
        return !1;
    var formId = form.getAttribute("id"),
        inputBoxClassName = form.getAttribute("data-inputbox");
    inputBoxClassName || (inputBoxClassName = ".blockinput");
    var inputGroup = "",
        isErrorBox = !1,
        isShowErrors = !0,
        errorItem = "",
        errorInputs = "",
        strError = "",
        strCommonError = "",
        popupError = document.getElementById("tilda-popup-for-error");
    popupError || (document.body.insertAdjacentHTML("beforeend", '<div id="tilda-popup-for-error" class="js-form-popup-errorbox tn-form__errorbox-popup" style="display: none;"> <div class="t-form__errorbox-text t-text t-text_xs"> error </div> <div class="tn-form__errorbox-close js-errorbox-close"> <div class="tn-form__errorbox-close-line tn-form__errorbox-close-line-left"></div> <div class="tn-form__errorbox-close-line tn-form__errorbox-close-line-right"></div> </div> </div>'), t_addEventListener(popupError = document.getElementById("tilda-popup-for-error"), "click", (function(event) {
        var target,
            closeBtn;
        if (((event = event || window.event).target || event.srcElement).closest(".js-errorbox-close"))
            return event.preventDefault ? event.preventDefault() : event.returnValue = !1, t_fadeOut(popupError), !1
    })));
    for (var i = 0; i < arrErrors.length; i++)
        if (arrErrors[i] && arrErrors[i].obj) {
            if (0 === i && "none" === arrErrors[i].obj) {
                strCommonError = '<p class="t-form__errorbox-item">' + t_forms__getMsg("emptyfill") + "</p>";
                break
            }
            var el = arrErrors[i].obj;
            el instanceof Element || (el = el[0]),
            el && (inputGroup = el.closest(inputBoxClassName)),
            inputGroup && (errorInputs = inputGroup.querySelectorAll(".t-input-error"), t_addClass(inputGroup, "js-error-control-box"), errorInputs.length && (isErrorBox = !0));
            for (var j = 0; j < arrErrors[i].type.length; j++) {
                var error = arrErrors[i].type[j],
                    localizedError = t_forms__getMsg(error);
                strError = "",
                (errorItem = form.querySelector(".js-rule-error-" + error)) ? errorItem.textContent && errorItem.innerText || !localizedError || -1 !== strCommonError.indexOf(localizedError) ? (strError = errorItem.textContent || errorItem.innerText, -1 === strCommonError.indexOf(localizedError) && (strCommonError = strCommonError + '<p class="t-form__errorbox-item">' + strError + "</p>")) : strCommonError = strCommonError + '<p class="t-form__errorbox-item">' + localizedError + "</p>" : localizedError && -1 === strCommonError.indexOf(localizedError) && (strCommonError = strCommonError + '<p class="t-form__errorbox-item">' + localizedError + "</p>"),
                isErrorBox && (!strError && t_forms__getMsg(error + "field") ? strError = t_forms__getMsg(error + "field") : localizedError && (strError = localizedError), strError && inputGroup && (errorInputs = inputGroup.querySelectorAll(".t-input-error"), Array.prototype.forEach.call(errorInputs, (function(input) {
                    input.innerHTML = strError,
                    t_fadeIn(input)
                }))))
            }
        }
    if (strCommonError) {
        popupError.querySelector(".t-form__errorbox-text").innerHTML = strCommonError;
        var errorsText = popupError.querySelectorAll(".t-form__errorbox-item");
        Array.prototype.forEach.call(errorsText, (function(text) {
            text.style.display = "block"
        })),
        t_fadeIn(popupError)
    }
    function t_forms__hidePopup(event) {
        var input;
        if ("INPUT" === ((event = event || window.event).target || event.srcElement).tagName) {
            var errorInputs = rec.querySelectorAll("form .t-input-error");
            t_fadeOut(popupError),
            Array.prototype.forEach.call(errorInputs, (function(input) {
                input.innerHTML = "",
                t_fadeOut(input)
            })),
            window.t_forms__errorTimerID && (window.clearTimeout(window.t_forms__errorTimerID), window.t_forms__errorTimerID = 0),
            window.isInitEventsZB[formId] = !0
        }
    }
    if (window.t_forms__errorTimerID && window.clearTimeout(window.t_forms__errorTimerID), window.t_forms__errorTimerID = window.setTimeout((function() {
        t_fadeOut(popupError),
        errorInputs = form.querySelectorAll(".t-input-error"),
        Array.prototype.forEach.call(errorInputs, (function(input) {
            input.innerHTML = "",
            t_fadeOut(input)
        })),
        window.t_forms__errorTimerID = 0
    }), 1e4), !window.isInitEventsZB[formId]) {
        var rec = form.closest(".r"),
            eventFocus = "focus";
        document.addEventListener || (eventFocus = "focusin"),
        t_removeEventListener(rec, eventFocus, t_forms__hidePopup),
        t_addEventListener(rec, eventFocus, t_forms__hidePopup, !0),
        t_removeEventListener(rec, "change", t_forms__hidePopup),
        t_addEventListener(rec, "change", t_forms__hidePopup, !0)
    }
    return t_triggerEvent(form, "tildaform:aftererror"), !0
},
window.tildaForm.showErrors = function(form, arrErrors) {
    if (form instanceof Element || (form = form[0]), !arrErrors || !arrErrors.length)
        return !1;
    if ("y" === form.getAttribute("data-error-popup"))
        return tildaForm.showErrorInPopup(form, arrErrors);
    var inputBoxClassName = form.getAttribute("data-inputbox");
    inputBoxClassName || (inputBoxClassName = ".blockinput");
    for (var inputGroup = "", isErrorBox = !1, isShowErrors = !0, errorItem = "", errorInputs = "", strError = "", i = 0; i < arrErrors.length; i++)
        if (arrErrors[i] && arrErrors[i].obj) {
            if (0 === i && "none" === arrErrors[i].obj) {
                errorItem = form.querySelectorAll(".js-rule-error-all");
                for (var j = 0; j < errorItem.length; j++)
                    errorItem[j].innerHTML = t_forms__getMsg("emptyfill"),
                    errorItem[j].style.display = "block";
                break
            }
            var el = arrErrors[i].obj;
            el instanceof Element || (el = el[0]),
            el && (inputGroup = el.closest(inputBoxClassName)),
            inputGroup && (errorInputs = inputGroup.querySelectorAll(".t-input-error"), t_addClass(inputGroup, "js-error-control-box"), errorInputs.length > 0 && (isErrorBox = !0));
            for (var j = 0; j < arrErrors[i].type.length; j++) {
                var error = arrErrors[i].type[j];
                if (strError = "", (errorItem = form.querySelectorAll(".js-rule-error-" + error)).length)
                    for (var k = 0; k < errorItem.length; k++)
                        errorItem[k].getAttribute("data-rule-filled") ? errorItem[k].style.display = "block" : (errorItem[k].textContent && errorItem[k].innerText || !t_forms__getMsg(error) ? strError = errorItem[0].textContent || errorItem[0].innerText : errorItem[k].innerHTML = t_forms__getMsg(error), errorItem[k].style.display = "block");
                else if (t_forms__getMsg(error) && (errorItem = form.querySelectorAll(".js-rule-error-all")).length)
                    for (var k = 0; k < errorItem.length; k++)
                        errorItem[k].innerHTML = t_forms__getMsg(error),
                        errorItem[k].style.display = "block";
                isErrorBox && (!strError && t_forms__getMsg(error + "field") ? strError = t_forms__getMsg(error + "field") : !strError && t_forms__getMsg(error) && (strError = t_forms__getMsg(error)), strError && inputGroup && (errorInputs = inputGroup.querySelectorAll(".t-input-error"), Array.prototype.forEach.call(errorInputs, (function(input) {
                    input.innerHTML = strError
                }))))
            }
        }
    var errorBoxes = form.querySelectorAll(".js-errorbox-all");
    return Array.prototype.forEach.call(errorBoxes, (function(error) {
        error.style.display = "block"
    })), t_triggerEvent(form, "tildaform:aftererror"), !0
}
